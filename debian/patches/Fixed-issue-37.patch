From: William Desportes <williamdes@wdes.fr>
Date: Wed, 21 Dec 2022 23:20:01 +0400
Subject: Fixed issue #37 - assertTrue does not work with "set -e"

Forwarded: https://github.com/kward/shunit2/commit/6f6a6423f5d6f873d649c5210a0f1254c0aeaafa
Origin: upstream
---
 shunit2 | 180 +++++++++++++++++++++++++++++++---------------------------------
 1 file changed, 86 insertions(+), 94 deletions(-)

diff --git a/shunit2 b/shunit2
index b9b4603..39f65fb 100755
--- a/shunit2
+++ b/shunit2
@@ -62,12 +62,12 @@ SHUNIT_CMD_TPUT=${SHUNIT_CMD_TPUT:-${__SHUNIT_CMD_TPUT}}
 SHUNIT_COLOR=${SHUNIT_COLOR:-auto}
 
 # Specific shell checks.
-if command [ -n "${ZSH_VERSION:-}" ]; then
+if (command [ -n "${ZSH_VERSION:-}" ]); then
   setopt |grep "^shwordsplit$" >/dev/null
-  if command [ $? -ne ${SHUNIT_TRUE} ]; then
+  if (command [ $? -ne ${SHUNIT_TRUE} ]); then
     _shunit_fatal 'zsh shwordsplit option is required for proper operation'
   fi
-  if command [ -z "${SHUNIT_PARENT:-}" ]; then
+  if (command [ -z "${SHUNIT_PARENT:-}" ]); then
     _shunit_fatal "zsh does not pass \$0 through properly. please declare \
 \"SHUNIT_PARENT=\$0\" before calling shUnit2"
   fi
@@ -97,7 +97,7 @@ __shunit_constants=`set |grep '^__SHUNIT_' |cut -d= -f1`
 echo "${__shunit_constants}" |grep '^Binary file' >/dev/null && \
     __shunit_constants=`set |grep -a '^__SHUNIT_' |cut -d= -f1`
 for __shunit_const in ${__shunit_constants}; do
-  if command [ -z "${ZSH_VERSION:-}" ]; then
+  if (command [ -z "${ZSH_VERSION:-}" ]); then
     readonly "${__shunit_const}"
   else
     case ${ZSH_VERSION} in
@@ -145,7 +145,7 @@ __shunit_assertsSkipped=0
 #
 
 # shellcheck disable=SC2016,SC2089
-_SHUNIT_LINENO_='eval __shunit_lineno=""; if command [ "${1:-}" = "--lineno" ]; then command [ -n "$2" ] && __shunit_lineno="[$2] "; shift 2; fi'
+_SHUNIT_LINENO_='eval __shunit_lineno=""; if (command [ "${1:-}" = "--lineno" ]); then (command [ -n "$2" ]) && __shunit_lineno="[$2] "; shift 2; fi'
 
 #-----------------------------------------------------------------------------
 # Assertion functions.
@@ -162,7 +162,7 @@ _SHUNIT_LINENO_='eval __shunit_lineno=""; if command [ "${1:-}" = "--lineno" ];
 assertEquals() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 2 -o $# -gt 3 ]; then
+  if (command [ $# -lt 2 -o $# -gt 3 ]); then
     _shunit_error "assertEquals() requires two or three arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -170,7 +170,7 @@ assertEquals() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 3 ]; then
+  if (command [ $# -eq 3 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -178,7 +178,7 @@ assertEquals() {
   shunit_actual_=$2
 
   shunit_return=${SHUNIT_TRUE}
-  if command [ "${shunit_expected_}" = "${shunit_actual_}" ]; then
+  if (command [ "${shunit_expected_}" = "${shunit_actual_}" ]); then
     _shunit_assertPass
   else
     failNotEquals "${shunit_message_}" "${shunit_expected_}" "${shunit_actual_}"
@@ -202,7 +202,7 @@ _ASSERT_EQUALS_='eval assertEquals --lineno "${LINENO:-}"'
 assertNotEquals() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 2 -o $# -gt 3 ]; then
+  if (command [ $# -lt 2 -o $# -gt 3 ]); then
     _shunit_error "assertNotEquals() requires two or three arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -210,7 +210,7 @@ assertNotEquals() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 3 ]; then
+  if (command [ $# -eq 3 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -218,7 +218,7 @@ assertNotEquals() {
   shunit_actual_=$2
 
   shunit_return=${SHUNIT_TRUE}
-  if command [ "${shunit_expected_}" != "${shunit_actual_}" ]; then
+  if (command [ "${shunit_expected_}" != "${shunit_actual_}" ]); then
     _shunit_assertPass
   else
     failSame "${shunit_message_}" "${shunit_expected_}" "${shunit_actual_}"
@@ -242,7 +242,7 @@ _ASSERT_NOT_EQUALS_='eval assertNotEquals --lineno "${LINENO:-}"'
 assertContains() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 2 -o $# -gt 3 ]; then
+  if (command [ $# -lt 2 -o $# -gt 3 ]); then
     _shunit_error "assertContains() requires two or three arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -250,7 +250,7 @@ assertContains() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 3 ]; then
+  if (command [ $# -eq 3 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -282,7 +282,7 @@ _ASSERT_CONTAINS_='eval assertContains --lineno "${LINENO:-}"'
 assertNotContains() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 2 -o $# -gt 3 ]; then
+  if (command [ $# -lt 2 -o $# -gt 3 ]); then
     _shunit_error "assertNotContains() requires two or three arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -290,7 +290,7 @@ assertNotContains() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 3 ]; then
+  if (command [ $# -eq 3 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -321,7 +321,7 @@ _ASSERT_NOT_CONTAINS_='eval assertNotContains --lineno "${LINENO:-}"'
 assertNull() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 1 -o $# -gt 2 ]; then
+  if (command [ $# -lt 1 -o $# -gt 2 ]); then
     _shunit_error "assertNull() requires one or two arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -329,7 +329,7 @@ assertNull() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 2 ]; then
+  if (command [ $# -eq 2 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -352,7 +352,8 @@ _ASSERT_NULL_='eval assertNull --lineno "${LINENO:-}"'
 assertNotNull() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -gt 2 ]; then  # allowing 0 arguments as $1 might actually be null
+  if (command [ $# -gt 2 ]); then
+    # Allowing 0 arguments as $1 might actually be null.
     _shunit_error "assertNotNull() requires one or two arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -360,7 +361,7 @@ assertNotNull() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 2 ]; then
+  if (command [ $# -eq 2 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -386,7 +387,7 @@ _ASSERT_NOT_NULL_='eval assertNotNull --lineno "${LINENO:-}"'
 assertSame() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 2 -o $# -gt 3 ]; then
+  if (command [ $# -lt 2 -o $# -gt 3 ]); then
     _shunit_error "assertSame() requires two or three arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -394,7 +395,7 @@ assertSame() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 3 ]; then
+  if (command [ $# -eq 3 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -418,7 +419,7 @@ _ASSERT_SAME_='eval assertSame --lineno "${LINENO:-}"'
 assertNotSame() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 2 -o $# -gt 3 ]; then
+  if (command [ $# -lt 2 -o $# -gt 3 ]); then
     _shunit_error "assertNotSame() requires two or three arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -426,7 +427,7 @@ assertNotSame() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 3 ]; then
+  if (command [ $# -eq 3 ]); then
     shunit_message_="${shunit_message_:-}$1"
     shift
   fi
@@ -463,7 +464,7 @@ _ASSERT_NOT_SAME_='eval assertNotSame --lineno "${LINENO:-}"'
 assertTrue() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 1 -o $# -gt 2 ]; then
+  if (command [ $# -lt 1 -o $# -gt 2 ]); then
     _shunit_error "assertTrue() takes one or two arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -471,30 +472,30 @@ assertTrue() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 2 ]; then
+  if (command [ $# -eq 2 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
   shunit_condition_=$1
 
   # See if condition is an integer, i.e. a return value.
-  shunit_match_=`expr "${shunit_condition_}" : '\([0-9]*\)'`
   shunit_return=${SHUNIT_TRUE}
-  if command [ -z "${shunit_condition_}" ]; then
+  shunit_match_=`expr "${shunit_condition_}" : '\([0-9]*\)'`
+  if (command [ -z "${shunit_condition_}" ]); then
     # Null condition.
     shunit_return=${SHUNIT_FALSE}
-  elif command [ -n "${shunit_match_}" -a "${shunit_condition_}" = "${shunit_match_}" ]
+  elif (command [ -n "${shunit_match_}" -a "${shunit_condition_}" = "${shunit_match_}" ])
   then
     # Possible return value. Treating 0 as true, and non-zero as false.
-    command [ "${shunit_condition_}" -ne 0 ] && shunit_return=${SHUNIT_FALSE}
+    (command [ "${shunit_condition_}" -ne 0 ]) && shunit_return=${SHUNIT_FALSE}
   else
     # Hopefully... a condition.
     ( eval "${shunit_condition_}" ) >/dev/null 2>&1
-    command [ $? -ne 0 ] && shunit_return=${SHUNIT_FALSE}
+    (command [ $? -ne 0 ]) && shunit_return=${SHUNIT_FALSE}
   fi
 
   # Record the test.
-  if command [ ${shunit_return} -eq ${SHUNIT_TRUE} ]; then
+  if (command [ ${shunit_return} -eq ${SHUNIT_TRUE} ]); then
     _shunit_assertPass
   else
     _shunit_assertFail "${shunit_message_}"
@@ -530,7 +531,7 @@ _ASSERT_TRUE_='eval assertTrue --lineno "${LINENO:-}"'
 assertFalse() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 1 -o $# -gt 2 ]; then
+  if (command [ $# -lt 1 -o $# -gt 2 ]); then
     _shunit_error "assertFalse() requires one or two arguments; $# given"
     _shunit_assertFail
     return ${SHUNIT_ERROR}
@@ -538,7 +539,7 @@ assertFalse() {
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 2 ]; then
+  if (command [ $# -eq 2 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -547,21 +548,21 @@ assertFalse() {
   # See if condition is an integer, i.e. a return value.
   shunit_match_=`expr "${shunit_condition_}" : '\([0-9]*\)'`
   shunit_return=${SHUNIT_TRUE}
-  if command [ -z "${shunit_condition_}" ]; then
+  if (command [ -z "${shunit_condition_}" ]); then
     # Null condition.
     shunit_return=${SHUNIT_FALSE}
-  elif command [ -n "${shunit_match_}" -a "${shunit_condition_}" = "${shunit_match_}" ]
+  elif (command [ -n "${shunit_match_}" -a "${shunit_condition_}" = "${shunit_match_}" ])
   then
     # Possible return value. Treating 0 as true, and non-zero as false.
-    command [ "${shunit_condition_}" -eq 0 ] && shunit_return=${SHUNIT_FALSE}
+    (command [ "${shunit_condition_}" -eq 0 ]) && shunit_return=${SHUNIT_FALSE}
   else
     # Hopefully... a condition.
     ( eval "${shunit_condition_}" ) >/dev/null 2>&1
-    command [ $? -eq 0 ] && shunit_return=${SHUNIT_FALSE}
+    (command [ $? -eq 0 ]) && shunit_return=${SHUNIT_FALSE}
   fi
 
   # Record the test.
-  if command [ "${shunit_return}" -eq "${SHUNIT_TRUE}" ]; then
+  if (command [ "${shunit_return}" -eq "${SHUNIT_TRUE}" ]); then
     _shunit_assertPass
   else
     _shunit_assertFail "${shunit_message_}"
@@ -586,14 +587,14 @@ _ASSERT_FALSE_='eval assertFalse --lineno "${LINENO:-}"'
 fail() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -gt 1 ]; then
+  if (command [ $# -gt 1 ]); then
     _shunit_error "fail() requires zero or one arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 1 ]; then
+  if (command [ $# -eq 1 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -617,14 +618,14 @@ _FAIL_='eval fail --lineno "${LINENO:-}"'
 failNotEquals() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 2 -o $# -gt 3 ]; then
+  if (command [ $# -lt 2 -o $# -gt 3 ]); then
     _shunit_error "failNotEquals() requires one or two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 3 ]; then
+  if (command [ $# -eq 3 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -650,14 +651,14 @@ _FAIL_NOT_EQUALS_='eval failNotEquals --lineno "${LINENO:-}"'
 failFound() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 1 -o $# -gt 2 ]; then
+  if (command [ $# -lt 1 -o $# -gt 2 ]); then
     _shunit_error "failFound() requires one or two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 2 ]; then
+  if (command [ $# -eq 2 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -681,14 +682,14 @@ _FAIL_FOUND_='eval failFound --lineno "${LINENO:-}"'
 failNotFound() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 1 -o $# -gt 2 ]; then
+  if (command [ $# -lt 1 -o $# -gt 2 ]); then
     _shunit_error "failNotFound() requires one or two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 2 ]; then
+  if (command [ $# -eq 2 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -715,14 +716,14 @@ failSame()
 {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 2 -o $# -gt 3 ]; then
+  if (command [ $# -lt 2 -o $# -gt 3 ]); then
     _shunit_error "failSame() requires two or three arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 3 ]; then
+  if (command [ $# -eq 3 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -749,14 +750,14 @@ _FAIL_SAME_='eval failSame --lineno "${LINENO:-}"'
 failNotSame() {
   # shellcheck disable=SC2090
   ${_SHUNIT_LINENO_}
-  if command [ $# -lt 2 -o $# -gt 3 ]; then
+  if (command [ $# -lt 2 -o $# -gt 3 ]); then
     _shunit_error "failNotSame() requires one or two arguments; $# given"
     return ${SHUNIT_ERROR}
   fi
   _shunit_shouldSkip && return ${SHUNIT_TRUE}
 
   shunit_message_=${__shunit_lineno}
-  if command [ $# -eq 3 ]; then
+  if (command [ $# -eq 3 ]); then
     shunit_message_="${shunit_message_}$1"
     shift
   fi
@@ -900,10 +901,10 @@ _shunit_mktempDir() {
 
   # The standard `mktemp` didn't work. Use our own.
   # shellcheck disable=SC2039
-  if command [ -r '/dev/urandom' -a -x '/usr/bin/od' ]; then
+  if (command [ -r '/dev/urandom' -a -x '/usr/bin/od' ]); then
     _shunit_random_=`/usr/bin/od -vAn -N4 -tx4 </dev/urandom \
         |command sed 's/^[^0-9a-f]*//'`
-  elif command [ -n "${RANDOM:-}" ]; then
+  elif (command [ -n "${RANDOM:-}" ]); then
     # $RANDOM works
     _shunit_random_=${RANDOM}${RANDOM}${RANDOM}$$
   else
@@ -958,30 +959,27 @@ _shunit_cleanup() {
       _shunit_signal_=0
       ;;
   esac
-  if command [ "${_shunit_name_}" != 'EXIT' ]; then
+  if (command [ "${_shunit_name_}" != 'EXIT' ]); then
     _shunit_warn "trapped and now handling the (${_shunit_name_}) signal"
   fi
 
   # Do our work.
-  if command [ ${__shunit_clean} -eq ${SHUNIT_FALSE} ]; then
+  if (command [ ${__shunit_clean} -eq ${SHUNIT_FALSE} ]); then
     # Ensure tear downs are only called once.
     __shunit_clean=${SHUNIT_TRUE}
 
-    tearDown
-    command [ $? -eq ${SHUNIT_TRUE} ] \
-        || _shunit_warn "tearDown() returned non-zero return code."
-    oneTimeTearDown
-    command [ $? -eq ${SHUNIT_TRUE} ] \
-        || _shunit_warn "oneTimeTearDown() returned non-zero return code."
+    tearDown || _shunit_warn 'tearDown() returned non-zero return code.'
+    oneTimeTearDown || \
+        _shunit_warn 'oneTimeTearDown() returned non-zero return code.'
 
     command rm -fr "${__shunit_tmpDir}"
   fi
 
-  if command [ "${_shunit_name_}" != 'EXIT' ]; then
+  if (command [ "${_shunit_name_}" != 'EXIT' ]); then
     # Handle all non-EXIT signals.
     trap - 0  # Disable EXIT trap.
     exit ${_shunit_signal_}
-  elif command [ ${__shunit_reportGenerated} -eq ${SHUNIT_FALSE} ]; then
+  elif (command [ ${__shunit_reportGenerated} -eq ${SHUNIT_FALSE} ]); then
     _shunit_assertFail 'unknown failure encountered running a test'
     _shunit_generateReport
     exit ${SHUNIT_ERROR}
@@ -999,7 +997,7 @@ _shunit_configureColor() {
   case $1 in
     'always') _shunit_color_=${SHUNIT_TRUE} ;;
     'auto')
-      command [ "`_shunit_colors`" -ge 8 ] && _shunit_color_=${SHUNIT_TRUE}
+      (command [ "`_shunit_colors`" -ge 8 ]) && _shunit_color_=${SHUNIT_TRUE}
       ;;
     'none') ;;
     *) _shunit_fatal "unrecognized color option '$1'" ;;
@@ -1034,7 +1032,7 @@ _shunit_colors() {
   fi
 
   _shunit_tput_=`${SHUNIT_CMD_TPUT} colors 2>/dev/null`
-  if command [ $? -eq 0 ]; then
+  if (command [ $? -eq 0 ]); then
     echo "${_shunit_tput_}"
   else
     echo 16
@@ -1054,26 +1052,22 @@ _shunit_execSuite() {
     endSkipping
 
     # Execute the per-test setup function.
-    setUp
-    command [ $? -eq ${SHUNIT_TRUE} ] \
-        || _shunit_fatal "setup() returned non-zero return code."
+    setUp || _shunit_fatal "setup() returned non-zero return code."
 
     # Execute the test.
     echo "${__SHUNIT_TEST_PREFIX}${_shunit_test_}"
     eval "${_shunit_test_}"
-    if command [ $? -ne ${SHUNIT_TRUE} ]; then
+    if (command [ $? -ne ${SHUNIT_TRUE} ]); then
       _shunit_error "${_shunit_test_}() returned non-zero return code."
       __shunit_testSuccess=${SHUNIT_ERROR}
       _shunit_incFailedCount
     fi
 
     # Execute the per-test tear-down function.
-    tearDown
-    command [ $? -eq ${SHUNIT_TRUE} ] \
-        || _shunit_fatal "tearDown() returned non-zero return code."
+    tearDown || _shunit_fatal "tearDown() returned non-zero return code."
 
     # Update stats.
-    if command [ ${__shunit_testSuccess} -eq ${SHUNIT_TRUE} ]; then
+    if (command [ ${__shunit_testSuccess} -eq ${SHUNIT_TRUE} ]); then
       __shunit_testsPassed=`expr ${__shunit_testsPassed} + 1`
     else
       __shunit_testsFailed=`expr ${__shunit_testsFailed} + 1`
@@ -1090,31 +1084,31 @@ _shunit_execSuite() {
 # Output:
 #   string: the report of successful and failed tests, as well as totals.
 _shunit_generateReport() {
-  command [ "${__shunit_reportGenerated}" -eq ${SHUNIT_TRUE} ] && return
+  (command [ "${__shunit_reportGenerated}" -eq ${SHUNIT_TRUE} ]) && return
 
   _shunit_ok_=${SHUNIT_TRUE}
 
   # If no exit code was provided, determine an appropriate one.
-  command [ "${__shunit_testsFailed}" -gt 0 \
-      -o ${__shunit_testSuccess} -eq ${SHUNIT_FALSE} ] \
+  (command [ "${__shunit_testsFailed}" -gt 0 \
+      -o ${__shunit_testSuccess} -eq ${SHUNIT_FALSE} ]) \
           && _shunit_ok_=${SHUNIT_FALSE}
 
   echo
   _shunit_msg_="Ran ${__shunit_ansi_cyan}${__shunit_testsTotal}${__shunit_ansi_none}"
-  if command [ "${__shunit_testsTotal}" -eq 1 ]; then
+  if (command [ "${__shunit_testsTotal}" -eq 1 ]); then
     ${__SHUNIT_CMD_ECHO_ESC} "${_shunit_msg_} test."
   else
     ${__SHUNIT_CMD_ECHO_ESC} "${_shunit_msg_} tests."
   fi
 
-  if command [ ${_shunit_ok_} -eq ${SHUNIT_TRUE} ]; then
+  if (command [ ${_shunit_ok_} -eq ${SHUNIT_TRUE} ]); then
     _shunit_msg_="${__shunit_ansi_green}OK${__shunit_ansi_none}"
-    command [ "${__shunit_assertsSkipped}" -gt 0 ] \
+    (command [ "${__shunit_assertsSkipped}" -gt 0 ]) \
         && _shunit_msg_="${_shunit_msg_} (${__shunit_ansi_yellow}skipped=${__shunit_assertsSkipped}${__shunit_ansi_none})"
   else
     _shunit_msg_="${__shunit_ansi_red}FAILED${__shunit_ansi_none}"
     _shunit_msg_="${_shunit_msg_} (${__shunit_ansi_red}failures=${__shunit_assertsFailed}${__shunit_ansi_none}"
-    command [ "${__shunit_assertsSkipped}" -gt 0 ] \
+    (command [ "${__shunit_assertsSkipped}" -gt 0 ]) \
         && _shunit_msg_="${_shunit_msg_},${__shunit_ansi_yellow}skipped=${__shunit_assertsSkipped}${__shunit_ansi_none}"
     _shunit_msg_="${_shunit_msg_})"
   fi
@@ -1133,7 +1127,7 @@ _shunit_generateReport() {
 # Returns:
 #   boolean: whether the test should be skipped (TRUE/FALSE constant)
 _shunit_shouldSkip() {
-  command [ ${__shunit_skip} -eq ${SHUNIT_FALSE} ] && return ${SHUNIT_FALSE}
+  (command [ ${__shunit_skip} -eq ${SHUNIT_FALSE} ]) && return ${SHUNIT_FALSE}
   _shunit_assertSkip
 }
 
@@ -1200,7 +1194,7 @@ _shunit_prepForSourcing() {
 # Returns:
 #   string: with escaped character(s)
 _shunit_escapeCharInStr() {
-  command [ -n "$2" ] || return  # No point in doing work on an empty string.
+  (command [ -n "$2" ]) || return  # No point in doing work on an empty string.
 
   # Note: using shorter variable names to prevent conflicts with
   # _shunit_escapeCharactersInString().
@@ -1221,7 +1215,7 @@ _shunit_escapeCharInStr() {
 # Returns:
 #   string: with escaped character(s)
 _shunit_escapeCharactersInString() {
-  command [ -n "$1" ] || return  # No point in doing work on an empty string.
+  (command [ -n "$1" ]) || return  # No point in doing work on an empty string.
 
   _shunit_str_=$1
 
@@ -1260,12 +1254,12 @@ _shunit_extractTestFunctions() {
 #
 
 # Determine the operating mode.
-if command [ $# -eq 0 -o "${1:-}" = '--' ]; then
+if (command [ $# -eq 0 -o "${1:-}" = '--' ]); then
   __shunit_script=${__SHUNIT_PARENT}
   __shunit_mode=${__SHUNIT_MODE_SOURCED}
 else
   __shunit_script=$1
-  command [ -r "${__shunit_script}" ] || \
+  (command [ -r "${__shunit_script}" ]) || \
       _shunit_fatal "unable to read from ${__shunit_script}"
   __shunit_mode=${__SHUNIT_MODE_STANDALONE}
 fi
@@ -1294,7 +1288,7 @@ noexec 2>/dev/null || _shunit_fatal \
     'Please declare TMPDIR with path on partition with exec permission.'
 
 # We must manually source the tests in standalone mode.
-if command [ "${__shunit_mode}" = "${__SHUNIT_MODE_STANDALONE}" ]; then
+if (command [ "${__shunit_mode}" = "${__SHUNIT_MODE_STANDALONE}" ]); then
   # shellcheck disable=SC1090
   command . "`_shunit_prepForSourcing \"${__shunit_script}\"`"
 fi
@@ -1303,12 +1297,11 @@ fi
 _shunit_configureColor "${SHUNIT_COLOR}"
 
 # Execute the oneTimeSetUp function (if it exists).
-oneTimeSetUp
-command [ $? -eq ${SHUNIT_TRUE} ] \
-    || _shunit_fatal "oneTimeSetUp() returned non-zero return code."
+oneTimeSetUp || \
+    _shunit_fatal "oneTimeSetUp() returned non-zero return code."
 
 # Command line selected tests or suite selected tests
-if command [ "$#" -ge 2 ]; then
+if (command [ "$#" -ge 2 ]); then
   # Argument $1 is either the filename of tests or '--'; either way, skip it.
   shift
   # Remaining arguments ($2 .. $#) are assumed to be test function names.
@@ -1325,7 +1318,7 @@ else
 fi
 
 # If no tests or suite specified, dynamically build a list of functions.
-if command [ -z "${__shunit_suite}" ]; then
+if (command [ -z "${__shunit_suite}" ]); then
   shunit_funcs_=`_shunit_extractTestFunctions "${__shunit_script}"`
   for shunit_func_ in ${shunit_funcs_}; do
     suite_addTest "${shunit_func_}"
@@ -1337,13 +1330,12 @@ unset shunit_func_ shunit_funcs_
 _shunit_execSuite
 
 # Execute the oneTimeTearDown function (if it exists).
-oneTimeTearDown
-command [ $? -eq ${SHUNIT_TRUE} ] \
-    || _shunit_fatal "oneTimeTearDown() returned non-zero return code."
+oneTimeTearDown || \
+    _shunit_fatal "oneTimeTearDown() returned non-zero return code."
 
 # Generate a report summary.
 _shunit_generateReport
 
 # That's it folks.
-command [ "${__shunit_testsFailed}" -eq 0 ]
+(command [ "${__shunit_testsFailed}" -eq 0 ])
 exit $?
